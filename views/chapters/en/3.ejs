<div id="book">
  <a name="yourfirstprogram" class="anchor"></a>
  <h2>Your First Program</h2>
  <p>This chapter is different than the ones we've seen so far. It'll let us apply what we've learned interactively. We'll be putting together a shopping list to build up our knowledge through small and simple steps. We'll also introduce new and more powerful concepts.</p>

  <p>In this chapter you'll be asked to provide some code in order to fufill a certain purpose. The output of this code will be diplayed on the right. Don't be afraid to try different solutions; and if you aren't sure what to type, you can always view the answer via the <em>answer</em> button. Do as much or as little as you want - we all learn differently and at a different pace.</p>

  <p>We haven't talked about comments yet, but almost all languages allow developers to add comments to their code. These have no impact on the application, but can be useful as reminders or explanations for other developers or even yourself.</p>

  <p>Most languages use a character to mark the start of a comment. The two most common are <code>#</code> and <code>//</code> (which is actually two characters). Comments can be on their own line, or they can be at the end of the line. You'll see some comments in the example below.</p>


  <a name="theland" class="anchor"></a>
  <h3>Lay Of The Land</h3>
  <p>The first thing we'll do is get comfortable with this new interactive environment. Every interactive section has the same six components. You should familiarize yourself with all six.</p>

  <ol>
    <li>First, in the top right is your <em>shopping list</em> When you run your code, you'll see this list get updated. This is also where any error messages will show up.</li>
    <li>Next, you have an <em>coding area</em>, which is where you can program. The coding area is easy to spot because of how green it is.</li>
    <li>Below the coding area you'll find the <em>run button</em>. Clicking it will run the code found inside the coding area (again, feel free to play around, no one's watching!)</li>
    <li>Since each excercise builds on top of the previous one, a <em>reset button</em> allows you to ensure your shopping list is properly setup. This is useful if you skip a step or if you played around and your shopping list is a mess.</li>
    <li>Next to the run button you'll find the an <em>answer button</em> which will show you a possible answer (there's always more than one way solve a programming problem).</li>
    <li>Finally, whenever you are typing inside your coding area, you'll see a <em>functions list</em> below your shopping list. This represents a list of functions you are allowed to use in this particular section. You can think of these as a 3rd party library - there to help you with common tasks.</li>
  </ol>

  <p>Let's give it a try. Below you'll find your first <em>coding area</em>. Once you click in it, you'll see that you have 1 function avaible (in the <em>functions list</em>). Since there are many ways to achieve the same thing, it's up to you to decide if your answer is correct. If you aren't sure, compare it to the provided answer (via the <em>answer button</em>).</p>

  <div class="codingArea" data-id="0">
    <div class="goal">You need to buy milk. Add it to your list.</div>
    <textarea class="input"></textarea>
    <textarea class="answer" readonly="readonly"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>

  <a name="input" class="anchor"></a>
  <h3>Getting Input</h3>
  <p>While a program will have many hard-coded values, most data comes from external sources: like a file or user input. In our example above, it doesn't make sense to hard-code the value <em>milk</em>. Instead, we'd prefer to ask the user using the newly available <code>prompt</code> function:</p>

  <div class="codingArea" data-id="1">
    <div class="goal">Ask the user what to add and add the value to the list</div>
    <textarea class="input"></textarea>
    <textarea class="answer" readonly="readonly"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>

  <a name="library" class="anchor"></a>
  <h3>addItem, prompt, What Are These?</h3>
  <p>This is just a little detoure to remind you of the conversation we had about libraries and framework from chapter 3. You might very well be wondering where <code>addItem</code> and <code>prompt</code> come from and might even feel like you are cheating a bit. <code>prompt</code> is actually a function built-into your browser. I wouldn't even know where to begin if we had to build it ourselves. <code>addItem</code> is a function written specifically for this tutorial and can be simply thought of as a third-party library.</p>

  <p>The reason you didn't write the <code>addItem</code> function yourself is because it is full of information which is very specific to manipulating HTML web pages; which only muddies our attempt to learn programming in general. First you learn the basics, then you can learn more specific topics.</p>

  <a name="validation" class="anchor"></a>
  <h3>Some Basic Validation</h3>
  <p>Currently, our little program allows users to answer the prompt without actually entering a value. It would be nice to catch this and display a message. Try it by using an <code>if/else</code> condition and the new <code>alert</code> function:</p>

  <div class="codingArea" data-id="2">
    <div class="goal">If the entered value is empty, alert an warning</div>
    <textarea class="input"></textarea>
    <textarea class="answer" readonly="readonly"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>

  <a name="duplicates" class="anchor"></a>
  <h3>Avoiding Duplicates, Part 1</h3>
  <p>The last task that we'll look at is making sure we can't add the same item twice. We'll do this in two separate steps. First, we'll use the new function <code>itemExists</code> to see if the item already exists. This is very similar to our above null or empty check. Go ahead and try: </p>

  <div class="codingArea" data-id="3">
    <div class="goal">Display a message if the item already exists</div>
    <textarea class="input"></textarea>
    <textarea class="answer" readonly="readonly"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>

  <a name="bonus" class="anchor"></a>
  <h3>Avoiding Duplicates, Bonus Step</h3>
  <p>The last step that we'll look at in this chapter is to write our own <code>itemExists</code> function. In order to be able to do this we'll use the new <code>getItems</code> function which returns a collection of existing items. In chapter 2 we saw how to use a <code>for</code> loop to iterate over each value in a collection, such as <code>for card in deck</code>.</p>

  <div class="codingArea taller" data-id="4">
    <div class="goal">As a bonus, write your own itemExists function</div>
    <textarea class="input">function itemExists(itemToFind)
  # Fill in the function's body




#we can test our function by outputting its result
alert(itemExists("milk"))</textarea>
    <textarea class="answer" readonly="readonly"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>

  <a name="inthischapter" class="anchor"></a>
  <h3>In This Chapter</h3>
  <p>This chapter had two purposes. First and foremost, to reinforce what you've learned in the previous chapters by having you actually code. Hopefully you felt somewhat adventurous and tried to come up with various solutions, or tried doing something completely different. For example, what happens if you go back to the first example and leave out the closing quote <code>addItem("mil)</code> or tried to call a function which does not exist?. </p>

  <p>Don't worry if you had to use the answers often, or even if the answers didn't make too much sense. The next chapter will be dedicated to understanding some of the more advanced concepts that we've seen here, as well as introducing a few new ones.</p>
</div>

<script src="/js/coffee-script.js"></script>
<script src="/js/chapter.3.js"></script>

<div id="runner">
  <div id="shopList">
    <h4>Your Shopping List</h4>
    <div id="items"></div>
  </div>
  <div id="funcList">
    <h4>Available Functions</h4>
    <div></div>
  </div>
</div>