<div id="book">
  <h2>Applying What We've Learned</h2>
  <p>This chapter is different than the ones we've seen so far. It'll let us apply what we've learned interactively. We'll be putting together a shopping list to build up our knowledge through small and simple steps. We'll also introduce new and more powerful concepts.</p>

  <p>In this chapter you'll be asked to provide some code in order to fufill a certain purpose. The output of this code will be diplayed on the right. Don't be afraid to try different solutions; and if you aren't sure what to type, you can always view the answer via the <em>answer</em> button. Do as much or as little as you want - we all learn differently and at a different pace.</p>

  <h3>Introducing JavaScript</h3>
  <p>The language that'll be using is JavaScript. The main reason we pick it is because web browsers have a JavaScript engine built-in. This means you have everything you need to be able to run JavaScript; there's no need to install or configured anything. Another benefit of JavaScript is that it's quite popular, making it a practical choice.</p>

  <p>Much of the new, slightly more cryptic, syntax that we learned in chapter 3 is how JavaScript (and a number of other languages) looks. That means you'll have to use braces <code>{}</code> for your blocks (like if statements and functions), use <code>var</code> before defining variables and include semicolons <code>;</code> after each statement (unline most languages which require a statement-terminator, JavaScript is fairly forgiving if you foget it, but it's better to be safe than sorry.)</p>

  <h3>Lay Of The Land</h3>
  <p>The first thing we'll do is get comfortable with this new interactive environment. Every interactive section has the same six components. You should familiarize yourself with all six.</p>

  <ol>
    <li>First, in the top right is your <em>shopping list</em> When you run your code, you'll see this list get updated. This is also where any error messages will show up.</li>
    <li>Next, you have an <em>coding area</em>, which is where you can program. The coding area is easy to spot because of how green it is.</li>
    <li>Below the coding area you'll find the <em>run button</em>. Clicking it will run the code found inside the coding area (again, feel free to play around, no one's watching!)</li>
    <li>Since each excercise builds on top of the previous one, a <em>reset button</em> allows you to ensure your shopping list is properly setup. This is useful if you skip a step or if you played around and your shopping list is a message.</li>
    <li>Next to the run button you'll find the an <em>answer button</em> which will show you a possible answer (there's always more than one way solve a programming problem).</li>
    <li>Finally, whenever you are typing inside your coding area, you'll see a <em>functions list</em> below your shopping list. This represents a list of functions you are allowed to use in this particular section. You can think of these as a 3rd party library - there to help you with common tasks.</li>
  </ol>

  <p>Let's give it a try. Below you'll find your first <em>coding area</em>. Once you click in it, you'll see that you have 1 function avaible (in the <em>functions list</em>).

  <div class="codingArea" data-id="0">
    <div class="goal">You need to buy milk. Add it to your list.</div>
    <textarea class="input"></textarea>
    <textarea class="answer" disabled="disabled"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>


  <h3>Getting Input</h3>
  <p>While a program will have many hard-coded values, most data comes from external sources: like a file or user input. In our example above, it doesn't make sense to hard-code the value <em>milk</em>. Instead, we'd prefer to ask the user using the newly available <code>prompt</code> function:</p>

  <div class="codingArea" data-id="1">
    <div class="goal">Ask the user what to add and add the value to the list</div>
    <textarea class="input"></textarea>
    <textarea class="answer" disabled="disabled"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>


  <h3>addItem, prompt, What Are These?</h3>
  <p>This is just a little detoure to remind you of the conversation we had about libraries and framework from chapter 3. You might very well be wondering where <code>addItem</code> and <code>prompt</code> come from and might even feel like you are cheating a bit. <code>prompt</code> is actually a function built-into JavaScript. I wouldn't even know where to begin if we had to build it ourselves. <code>addItem</code> is a function written specifically for this tutorial and can be simply thought of as a third-party library.</p>

  <p>The reason you didn't write the <code>addItem</code> function yourself is because it is full of information which is very specific to manipulating HTML web pages; which only muddies our attempt to learn programming in general. First you learn the basics, then you can learn more specific topics.</p>

  <h3>Some Basic Validation</h3>
  <p>Currently, our little program allows users to answer the prompt without actually entering a value. It would be nice to catch this and display a message to the user. Try it by using an <code>if</code> statement and the new <code>alert</code> function:</p>

  <div class="codingArea" data-id="2">
    <div class="goal">If the entered value is empty, alert an warning</div>
    <textarea class="input"></textarea>
    <textarea class="answer" disabled="disabled"></textarea>
    <div class="buttons">
      <a href="#" class="run">run</a>
      <a href="#" class="reset">reset</a>
      <a href="#" class="answer">answer</a>
    </div>
  </div>

</div>

<div id="runner">
  <div id="shopList">
    <h4>Your Shopping List</h4>
    <div id="items"></div>
  </div>
  <div id="funcList">
    <h4>Available Functions</h4>
    <div></div>
  </div>
</div>

<script type="text/template" id="functionTemplate">
  <div class="function">
    {{ display }}
    {% _.each(parameters, function(parameter, index) { %}
    <div class="type">{{ parameter[0] }}</div>
    <div class="desc">{{ parameter[1] }}</div>
    {% }); %}
  </div>
</script>

<script src="/js/underscore-1.3.3.js"></script>
<script src="/js/chapter.4.js"></script>